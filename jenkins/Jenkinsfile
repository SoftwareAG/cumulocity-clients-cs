pipeline {
    agent {
        docker {
            image 'c8y-ubuntu-mono-devel:0.0.1'
            args '-v /var/lib/jenkins/.mono:/root/.mono'
        }
    }
	parameters {
        booleanParam(defaultValue: true, description: '', name: 'diagnosticFlag')
		booleanParam(defaultValue: false, description: '', name: 'CAN_RELEASE')
    }
    environment {
        CI = 'true'
    }
    stages {
        stage('Build') {
		    
			when {
                branch 'develop'
            }
            steps {
			    
				script {
				    if ("${params.CAN_RELEASE}" == "true") {
							echo "CAN_RELEASE: ${params.CAN_RELEASE}"
							    
								sshagent (['jenkins-hg-key']) {
								sh '''#!/bin/bash
								whoami
								chmod +x ./MicroservicesSDK/build.sh
								cd MicroservicesSDK
								pwd
								./build.sh --script build-release.cake
								'''
					}
					else{
						if ("${params.diagnosticFlag}" == "true") {
							echo "diagnostic flag: ${params.diagnosticFlag}"
							sh 'cd MicroservicesSDK && chmod +x ./build.sh && pwd && ./build.sh -target=Test -verbosity=diagnostic'
						}else
						{
							echo "diagnostic flag: ${params.diagnosticFlag}"
							sh 'cd MicroservicesSDK && chmod +x ./build.sh && pwd && ./build.sh -target=Test'
						}
					}
                }
            }
        } 
		stage('Deliver for development') {
            when {
                branch 'development'
            }
            steps {
				sh 'echo DevelopmentBranch'
            }
        }
        stage('Release') {
            when {
                branch "release/*"
            }
            steps {
				script {
                    if ("${params.diagnosticFlag}" == "true") {
					    sh 'echo ReleaseBranch'
						echo "diagnostic flag: ${params.diagnosticFlag}"
						sh 'cd MicroservicesSDK && chmod +x ./build.sh && pwd && ./build.sh -target=Test -verbosity=diagnostic'
                    }else
					{
					    sh 'echo ReleaseBranch'
						echo "diagnostic flag: ${params.diagnosticFlag}"
						sh 'cd MicroservicesSDK && chmod +x ./build.sh && pwd && ./build.sh -target=Test'
					}
                }
            }
        }	
    }
	
	post { 
        always { 
            cleanWs()
        }
    }
}
