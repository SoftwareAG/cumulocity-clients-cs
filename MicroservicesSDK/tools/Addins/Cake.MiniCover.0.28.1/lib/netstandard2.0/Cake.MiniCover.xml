<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.MiniCover</name>
    </assembly>
    <members>
        <member name="T:Cake.MiniCover.MiniCoverAliases">
            <summary>
            <para>Contains functionality related to <see href="https://github.com/lucaslorentz/minicover">MiniCover</see>.</para>
            <para>
            In order to use the commands for this alias, create a tools project and use the
            <see cref="M:Cake.MiniCover.MiniCoverAliases.SetMiniCoverToolsProject(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)"/> alias.
            </para>
            </summary>
            <example>
            <code>
            SetMiniCoverToolsProject("./minicover/minicover.csproj");
            MiniCover(tool =>
                {
                    foreach(var project in GetFiles("./test/**/*.csproj"))
                    {
                        tool.DotNetCoreTest(project.FullPath, new DotNetCoreTestSettings()
                        {
                            // Required to keep instrumentation added by MiniCover
                            NoBuild = true,
                            Configuration = configuration
                        });
                    }
                },
                new MiniCoverSettings()
                    .WithAssembliesMatching("./test/**/*.dll")
                    .WithSourcesMatching("./src/**/*.cs")
                    .GenerateReport(ReportType.CONSOLE | ReportType.XML)
            );
            </code>
            </example>
            <example>
            <code>
            SetMiniCoverToolsProject("./minicover/minicover.csproj");
            MiniCoverInstrument(
                new MiniCoverSettings()
                    .WithAssembliesMatching("./test/**/*.dll")
                    .WithSourcesMatching("./src/**/*.cs")
            );
            MiniCoverReset();
            DotNetCoreTest(...);
            MiniCoverUninstrument();
            MiniCoverReport(new MiniCoverSettings().GenerateReport(ReportType.CONSOLE | ReportType.XML));
            </code>
            </example>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.SetMiniCoverToolsProject(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Set the location of the 'csproj' that contains the MiniCover DotNetCliToolReference
            and restore packages for it
            </summary>
            <param name="ctx">The context.</param>
            <param name="miniCoverHelperProject">The path to the csproj to use for MiniCover.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCover(Cake.Core.ICakeContext,System.Action{Cake.Core.ICakeContext},Cake.MiniCover.Settings.MiniCoverSettings)">
            <summary>
            Instruments test assemblies using <see href="https://github.com/lucaslorentz/minicover">MiniCover</see>
            before executing the specified test action to generate code coverage.
            </summary>
            <param name="ctx">The context.</param>
            <param name="action">The test action to perform.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverInstrument(Cake.Core.ICakeContext)">
            <summary>
            Instrument the specified assemblies to gather coverage data
            </summary>
            <param name="ctx">The context.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverInstrument(Cake.Core.ICakeContext,Cake.MiniCover.Settings.MiniCoverSettings)">
            <summary>
            Instrument the specified assemblies to gather coverage data
            </summary>
            <param name="ctx">The context.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverReport(Cake.Core.ICakeContext,Cake.MiniCover.Settings.MiniCoverSettings)">
            <summary>
            Generate one or more minicover reports
            </summary>
            <param name="ctx">The context.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverReport(Cake.Core.ICakeContext,Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Generate a report using the specified report provider name. Only use this if
            if you need to generate a report for which Cake.MiniCover does not yet have
            settings for.
            </summary>
            <param name="ctx">The context.</param>
            <param name="settings">The settings.</param>
            <param name="reportName">The report provider to use</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverReport(Cake.Core.ICakeContext,Cake.MiniCover.Settings.MiniCoverSettings,System.String,System.Action{Cake.Core.IO.ProcessArgumentBuilder})">
            <summary>
            Generate a report using the specified report provider name. Only use this if
            if you need to generate a report for which Cake.MiniCover does not yet have
            settings for.
            </summary>
            <param name="ctx">The context.</param>
            <param name="settings">The settings.</param>
            <param name="reportName">The report provider to use</param>
            <param name="additionalArgs">Any additional arguments to specify</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverReset(Cake.Core.ICakeContext)">
            <summary>
            Reset coverage for the minicover project identified by the provided settings
            </summary>
            <param name="ctx">The context.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverReset(Cake.Core.ICakeContext,Cake.MiniCover.Settings.MiniCoverSettings)">
            <summary>
            Reset coverage for the minicover project identified by the provided settings
            </summary>
            <param name="ctx">The context.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverUninstrument(Cake.Core.ICakeContext)">
            <summary>
            Uninstrument the assemblies that were instrumented for code coverage
            </summary>
            <param name="ctx">The context.</param>
        </member>
        <member name="M:Cake.MiniCover.MiniCoverAliases.MiniCoverUninstrument(Cake.Core.ICakeContext,Cake.MiniCover.Settings.MiniCoverSettings)">
            <summary>
            Uninstrument the assemblies that were instrumented for code coverage
            </summary>
            <param name="ctx">The context.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.MiniCover.ReportType">
            <summary>
            The type of report to generate
            </summary>
        </member>
        <member name="F:Cake.MiniCover.ReportType.CONSOLE">
            <summary>
            Print coverate results to the console
            </summary>
        </member>
        <member name="F:Cake.MiniCover.ReportType.HTML">
            <summary>
            Generate an HTML Coverage Report
            </summary>
        </member>
        <member name="F:Cake.MiniCover.ReportType.XML">
            <summary>
            Generate an NCover Compatable XML Coverage Report
            </summary>
        </member>
        <member name="F:Cake.MiniCover.ReportType.OPENCOVER">
            <summary>
            Generate an OpenCover Compatable XML Coverage Report
            </summary>
        </member>
        <member name="F:Cake.MiniCover.ReportType.CLOVER">
            <summary>
            Generate a Clover-formatted XML Coverage Report
            </summary>
        </member>
        <member name="F:Cake.MiniCover.ReportType.COVERALLS">
            <summary>
            Generate a Coveralls-formatted JSON Coverage Report
            </summary>
        </member>
        <member name="T:Cake.MiniCover.Settings.CoverallsSettings">
            <summary>
            Settings for the <see cref="F:Cake.MiniCover.ReportType.COVERALLS"/> report type
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.RootPath">
            <summary>
            The git root path
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.ServiceJobId">
            <summary>
            The service_job_id to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.ServiceName">
            <summary>
            The service_name to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.RepoToken">
            <summary>
            The Repo Token to use when sending coverage to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.CommitHash">
            <summary>
            The git commit hash to use when sending coverage to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.CommitMessage">
            <summary>
            The git commit message to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.CommitAuthorName">
            <summary>
            The name of the commit author to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.CommitAuthorEmail">
            <summary>
            The Email of the commit author to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.CommitterName">
            <summary>
            The name of the comitter to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.CommitterEmail">
            <summary>
            The email of the comitter to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.Branch">
            <summary>
            The git branch to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.Remote">
            <summary>
            The name of the git remote to send to coveralls
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.CoverallsSettings.RemoteUrl">
            <summary>
            The url of the git remote to send to coveralls
            </summary>
        </member>
        <member name="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions">
            <summary>
            Extensions for <see cref="T:Cake.MiniCover.Settings.CoverallsSettings"/>
            </summary>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithRootPath(Cake.MiniCover.Settings.CoverallsSettings,System.String)">
            <summary>
            Set the root path to the git repo
            </summary>
            <param name="settings">The settings</param>
            <param name="rootPath">the path to the git repo</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithServiceJobId(Cake.MiniCover.Settings.CoverallsSettings,System.String)">
            <summary>
            Set the service_job_id to send to coveralls
            </summary>
            <param name="settings">The settings</param>
            <param name="serviceJobId">the service_job_id to send to coveralls</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithServiceName(Cake.MiniCover.Settings.CoverallsSettings,System.String)">
            <summary>
            Set the service_name to send to coveralls
            </summary>
            <param name="settings">The settings</param>
            <param name="serviceName">the service_name to send to coveralls</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithRepoToken(Cake.MiniCover.Settings.CoverallsSettings,System.String)">
            <summary>
            Set the Repo Token to use when sending coverage to coveralls
            </summary>
            <param name="settings">The settings</param>
            <param name="repoToken">the Repo Token to use when sending coverage to coveralls</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithCommit(Cake.MiniCover.Settings.CoverallsSettings,System.String,System.String)">
            <summary>
            Set the git commit message to use when sending coverage to coveralls
            </summary>
            <param name="settings">The settings</param>
            <param name="hash">the git commit hash to use when sending coverage to coverallss</param>
            
            <param name="message">the git commit message to use when sending coverage to coverallss</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithCommitAuthor(Cake.MiniCover.Settings.CoverallsSettings,System.String,System.String)">
            <summary>
            Set the commit author details
            </summary>
            <param name="settings">The settings</param>
            <param name="name">The name of the commit author</param>
            <param name="email">The email address of the commit author</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithCommitter(Cake.MiniCover.Settings.CoverallsSettings,System.String,System.String)">
            <summary>
            Set the comitter etails
            </summary>
            <param name="settings">The settings</param>
            <param name="name">The name of the committer</param>
            <param name="email">The email address of the committer</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithBranch(Cake.MiniCover.Settings.CoverallsSettings,System.String)">
            <summary>
            Set the git branch to send to coveralls
            </summary>
            <param name="settings">The settings</param>
            <param name="branch">The git branch to send to coveralls</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.WithRemote(Cake.MiniCover.Settings.CoverallsSettings,System.String,System.String)">
            <summary>
            Set git remote details
            </summary>
            <param name="settings">The settings</param>
            <param name="name">The name of the git remote</param>
            <param name="url">The URL of the git remote</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.CoverallsSettingsExtensions"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.CoverallsSettingsExtensions.UseTravisDefaults(Cake.MiniCover.Settings.CoverallsSettings,System.Boolean)">
            <summary>
            Populate the Coveralls Settings with information for publishing coverage from Travis CI
            </summary>
            <param name="settings"></param>
            <param name="isTravisPro"></param>
        </member>
        <member name="T:Cake.MiniCover.Settings.MiniCoverSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.MiniCover.MiniCoverAliases"/>.
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.AssemblyIncludePatterns">
            <summary>
            Pattern to include assemblies
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.AssemblyExcludeGlobPatterns">
            <summary>
            Pattern to exclude assemblies
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.SourcesGlobPatterns">
            <summary>
            Pattern to include source files
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.SourcesExcludeGlobPatterns">
            <summary>
            Pattern to exclude source files
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.HitsFileName">
            <summary>
            File name to store coverage hits in
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.CoverageFileName">
            <summary>
            Name of json coverage file
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.ReportType">
            <summary>
            The type of report or reports to generate
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.ReportPrefix">
            <summary>
            The prefix for html and xml reports
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.FailureThreshold">
            <summary>
            Coverage percentage below which the build will fail
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.NonFatalThreshold">
            <summary>
            If true, threshold is set for reporting only and will not fail the build
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.MiniCoverWorkingDirectory">
            <summary>
            The working directory for minicover (corresponds to the --workdir option)
            </summary>
        </member>
        <member name="P:Cake.MiniCover.Settings.MiniCoverSettings.Coveralls">
            <summary>
            Settings for the <see cref="F:Cake.MiniCover.ReportType.COVERALLS"/> report type
            </summary>
        </member>
        <member name="T:Cake.MiniCover.Settings.MiniCoverSettingsExtensions">
            <summary>
            Contains extensions for <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/>.
            </summary>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithAssembliesMatching(Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Instrument test assemblies matching the specified pattern
            </summary>
            <param name="settings">The settings.</param>
            <param name="pattern">The glob pattern to use when searching for test assemblies</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithoutAssebliesMatching(Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Exclude from instrumentation all test assemblies matching the specified pattern
            </summary>
            <param name="settings">The settings.</param>
            <param name="pattern">The glob pattern to use when searching for test assemblies to exclude</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithSourcesMatching(Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Measure coverage on files matching the specified pattern
            </summary>
            <param name="settings">The settings.</param>
            <param name="pattern">The glob pattern to use when searching for source files</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithoutSourcesMatching(Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Exclude files matching the specified pattern from coverage results
            </summary>
            <param name="settings">The settings.</param>
            <param name="pattern">The glob pattern to use when searching for source files</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithHitsFile(Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Use the provided name for the hits file
            </summary>
            <param name="settings">The settings.</param>
            <param name="hitsFile">The name of the hits file</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithCoverageFile(Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Use the provided name for the internal coverage file
            </summary>
            <param name="settings">The settings.</param>
            <param name="coverageFile">The name of the internal coverage file</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithThreshold(Cake.MiniCover.Settings.MiniCoverSettings,System.Single)">
            <summary>
            Set the coverage percentage below which the build will fail
            </summary>
            <param name="settings">The settings.</param>
            <param name="threshold">The failure threshold to use</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithNonFatalThreshold(Cake.MiniCover.Settings.MiniCoverSettings)">
            <summary>
            Do not fail the build if coverage is below the threshold
            </summary>
            <param name="settings">The Settings.</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithFatalThreshold(Cake.MiniCover.Settings.MiniCoverSettings)">
            <summary>
            Fail the build if coverage is below the threshold. This is the default behavior.
            </summary>
            <param name="settings">The Settings.</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.GenerateReport(Cake.MiniCover.Settings.MiniCoverSettings,Cake.MiniCover.ReportType)">
            <summary>
            Set the report type to generate
            </summary>
            <param name="settings">The settings.</param>
            <param name="reportType">The report type or types to generate</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
            <example>
            <code>
            // Print results to the console and generate an XML report
            var settings = new MiniCoverSettings().GenerateReport(ReportType.CONSOLE | ReportType.XML);
            </code>
            </example>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithReportPrefix(Cake.MiniCover.Settings.MiniCoverSettings,System.String)">
            <summary>
            Use the specified prefix for report generation
            </summary>
            <param name="settings">The settings.</param>
            <param name="prefix">The report prefix</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
            <example>
            // Genarate an html report in myCoverage-html/ and an xml report in myCoverage.xml
            var settings = new MiniCoverSettings().GenerateReport(ReportType.HTML | ReportType.XML).WithReportPrefix("myCoverage");
            </example>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithMiniCoverWorkingDirectory(Cake.MiniCover.Settings.MiniCoverSettings,Cake.Core.IO.DirectoryPath)">
            <summary>
            Set the --workdir for minicover
            </summary>
            <param name="settings">The settings.</param>
            <param name="workdir">The working directory to use for minicover</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
            <example>
            // Genarate an html report in myCoverage-html/ and an xml report in myCoverage.xml
            var settings = new MiniCoverSettings().GenerateReport(ReportType.HTML | ReportType.XML).WithReportPrefix("myCoverage");
            </example>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithCoverallsSettings(Cake.MiniCover.Settings.MiniCoverSettings,Cake.MiniCover.Settings.CoverallsSettings)">
            <summary>
            Set settings for coveralls report generation
            </summary>
            <param name="settings">The settings.</param>
            <param name="coveralls">Settings for coveralls</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
        </member>
        <member name="M:Cake.MiniCover.Settings.MiniCoverSettingsExtensions.WithCoverallsSettings(Cake.MiniCover.Settings.MiniCoverSettings,System.Action{Cake.MiniCover.Settings.CoverallsSettings})">
            <summary>
            Set settings for coveralls report generation
            </summary>
            <param name="settings">The settings.</param>
            <param name="coveralls">Settings for coveralls</param>
            <returns>The <see cref="T:Cake.MiniCover.Settings.MiniCoverSettings"/> instance so that multiple calls can be chained</returns>
            <example>
            // Publish coverage to Coveralls from travis-ci
            var settings = new MiniCoverSettings().GenerateReport(ReportType.COVERALLS).WithCoverallsSettings(c => c.UseTravisDefaults());
            </example>
        </member>
    </members>
</doc>
